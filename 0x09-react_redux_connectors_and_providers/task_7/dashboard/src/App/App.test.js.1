import { shallow } from 'enzyme';
import React from 'react';
import { StyleSheetTestUtils } from 'aphrodite';
import uiReducer, { initialState } from "../reducers/uiReducer";
import { createStore } from "redux";
import {fromJS} from "immutable";
import App, {mapStateToProps} from './App';
import { Provider } from "react-redux";

const store = createStore(uiReducer, initialState);
describe('<App />', () => {
  const wrapper = shallow(<Provider store={store}><App/></Provider>);
  beforeAll(() => {
    StyleSheetTestUtils.suppressStyleInjection();
  });
  afterAll(() => {
    StyleSheetTestUtils.clearBufferAndResumeStyleInjection();
  });
  it('render without crashing', () => {
    expect(wrapper.exists());
  });

  it('contain Notifications component', () => {
    expect(wrapper.find('Notifications')).toHaveLength(1);
  });

  it('contain Header component', () => {
    expect(wrapper.find('Header')).toHaveLength(1);
  });

  it('contain Login component', () => {
    expect(wrapper.find('Login')).toHaveLength(1);
  });

  it('contain Footer component', () => {
    expect(wrapper.find('Footer')).toHaveLength(1);
  });

  it('CourseList', () => {
    expect(wrapper.find('CourseList')).toHaveLength(0);
  });
  /*
  it('isLoggedIn true', () => {
    const wrapper = shallow(<App isLoggedIn />);
    expect(wrapper.exists());
    expect(wrapper.find('Login')).toHaveLength(0);
    expect(wrapper.find('CourseList')).toHaveLength(1);
  });
*/
  it('logOut', () => {
    const logOut = jest.fn(() => undefined);
    const wrapper = shallow(<Provider store={store}><App logOut={logOut} /></Provider>);
    expect(wrapper.exists());
    const alert = jest.spyOn(global, 'alert');
    expect(alert);
    expect(logOut);
    jest.restoreAllMocks();
  });

  it('default state for displayDrawer is false', () => {
    expect(wrapper.state().displayDrawer).toEqual(false);
  });

  it('displayDrawer toggle handleDisplayDrawer', () => {
    expect(wrapper.state().displayDrawer).toEqual(false);
    const instance = wrapper.instance();
    instance.handleDisplayDrawer();
    expect(wrapper.state().displayDrawer).toEqual(true);
  });

  it('displayDrawer toggle handleDisplayDrawer and handleHideDrawer', () => {
    expect(wrapper.state().displayDrawer).toEqual(false);
    wrapper.instance().handleDisplayDrawer();
    expect(wrapper.state().displayDrawer).toEqual(true);
    wrapper.instance().handleHideDrawer();
    expect(wrapper.state().displayDrawer).toEqual(false);
  });
  it("test markAsRead", () => {
    const markNotificationAsRead = jest.fn();
    // to test latter when nots are clicked markNotificationAsRead is called
    expect(wrapper.exists());
    jest.restoreAllMocks();
  });
});


describe('redux related tests', () => {
  it('testing mapStateToProps', () => {
    let state = fromJS({
      isUserLoggedIn: true,
    });

    const result = mapStateToProps(state);

    expect(result).toEqual({ isLoggedIn: true });
  });
});
